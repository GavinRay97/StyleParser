#!/usr/bin/env node
const YAML = require('js-yaml')
const fse = require('fs-extra')
const inspect = require('unist-util-inspect')
const is = require('unist-util-is')
const remove = require('unist-util-remove')
const removePosition = require('unist-util-remove-position')
const visit = require('unist-util-visit')
const {jsonify, parse, stringify} = require('..')

const syntaxes = ['auto', 'css', 'sass', 'scss', 'less']

const formatters = {
  'json': (tree, {pretty, indent}) => {
    indent = pretty ? 2 : indent
    return JSON.stringify(tree, null, ' '.repeat(indent))
  },
  'string': stringify,
  'tree': (tree, {color}) => color ? inspect(tree) : inspect.noColor(tree),
  'yaml': (tree, {pretty, indent, flowLevel}) => {
    const opts = pretty
      ? {indent: 2}
      : {indent, flowLevel}
    return YAML.safeDump(tree, 'utf8', opts)
  }
}

const validateChoice = (name, choices) => {
  return choice => {
    if (choices.indexOf(choice) === -1) {
      throw new Error(
        `Invalid ${name}: "${choice}"; expected on of: ${
          choices.map(c => '"' + c + '"').join(', ')}`
      )
    }
    return choice
  }
}

const yargs = require('yargs')
  .usage([
    '$0 [options] [<filename>]',
    '',
    'Parse a CSS, Sass, SCSS, or Less file and output its syntax tree in one of several formats.'
  ].join('\n'))
  .option('syntax', {
    alias: 's',
    desc: `Specify the sytax to parse, or infer from the filename (default)`,
    choices: syntaxes,
    default: 'auto',
    type: 'string',
  })
  .option('color', {
    desc: `Enable colored output for --format=tree`,
    type: 'boolean',
    alias: 'c',
  })
  .option('format', {
    desc: `Specify the output format`,
    type: 'string',
    alias: 'f',
    default: 'json',
    choices: Object.keys(formatters),
  })
  .option('pretty', {
    desc: 'Output prettily (for "json" and "yaml" formats only)',
    type: 'boolean',
  })
  .option('trim', {
    desc: 'Trim leading and trailing whitespace from the input',
    alias: 't',
    type: 'boolean',
  })
  .option('no-whitespace', {
    desc: 'Discard whitespace in the syntax tree before printing',
    alias: 'W',
    type: 'boolean',
  })
  .option('no-position', {
    desc: 'Remove position data from the syntax tree before printing',
    alias: 'P',
    type: 'boolean',
  })
  .strict(true)

const options = yargs.argv
const args = options._
delete options._
// console.warn('[x] options:', options)

const input = args.shift() || '/dev/stdin'
const format = formatters[options.format]

fse.readFile(input, 'utf8')
  .then(source => {
    if (options.trim) {
      // console.warn('[x] trimming the input')
      source = source.trim()
    }
    if (options.syntax === 'auto') {
      options.syntax = input.split('.').pop()
    }
    return parse(source, options)
  })
  .catch(error => {
    console.error(error)
    process.exit(1)
  })
  .then(tree => {
    if (options.noPosition) {
      // console.warn('[x] removing position data')
      removePosition(tree, true)
    }
    if (options.noWhitespace) {
      // console.warn('[x] removing whitespace')
      remove(tree, 'space')
    }
    const output = format(tree, options)
    console.log(output)
  })
